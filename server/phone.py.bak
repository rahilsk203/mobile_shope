import uuid
from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

# Flask app initialization
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///shop.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Database initialization
db = SQLAlchemy(app)

# Database Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)
    auth_key = db.Column(db.String(100), unique=True, nullable=False)

class RepairingProduct(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(100), nullable=False)
    company = db.Column(db.String(100), nullable=False)
    model = db.Column(db.String(100), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)

class SellingProduct(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    quantity = db.Column(db.Integer, nullable=False)

class Phone(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    imei = db.Column(db.String(15), unique=True, nullable=False)
    model_name = db.Column(db.String(100), nullable=False)
    company = db.Column(db.String(100), nullable=False)
    is_new = db.Column(db.Boolean, nullable=False)
    price = db.Column(db.Float, nullable=False)
    status = db.Column(db.String(20), nullable=False)  # Available or Sold Out
    date_added = db.Column(db.DateTime, default=datetime.utcnow)  # New field for date

    def update_status(self, is_available):
        self.status = "Available" if is_available else "Sold Out"

# Utility function to verify auth key
def verify_auth_key(auth_key):
    user = User.query.filter_by(auth_key=auth_key).first()
    return user is not None

@app.before_first_request
def create_tables():
    db.create_all()

# User Management APIs
@app.route('/register', methods=['GET'])
def register():
    username = request.args.get('username')
    password = request.args.get('password')

    if not username or not password:
        return jsonify({"message": "Username and password are required"}), 400

    if User.query.filter_by(username=username).first():
        return jsonify({"message": "User already exists"}), 400

    hashed_password = generate_password_hash(password)
    auth_key = str(uuid.uuid4())
    new_user = User(username=username, password=hashed_password, auth_key=auth_key)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"message": "User registered successfully", "auth_key": auth_key}), 201

@app.route('/login', methods=['GET'])
def login():
    username = request.args.get('username')
    password = request.args.get('password')

    if not username or not password:
        return jsonify({"message": "Username and password are required"}), 400

    user = User.query.filter_by(username=username).first()
    if not user or not check_password_hash(user.password, password):
        return jsonify({"message": "Invalid username or password"}), 401

    return jsonify({"message": f"User '{username}' logged in successfully", "auth_key": user.auth_key}), 200

# Repairing Product Management APIs
@app.route('/repairing/add', methods=['GET'])
def add_repairing_product():
    auth_key = request.args.get('auth_key')
    if not verify_auth_key(auth_key):
        return jsonify({"message": "Unauthorized access"}), 403

    name = request.args.get('name')
    type = request.args.get('type')
    company = request.args.get('company')
    model = request.args.get('model')
    quantity = request.args.get('quantity')

    if not name or not type or not company or not model or not quantity:
        return jsonify({"message": "All fields are required"}), 400

    try:
        quantity = int(quantity)
    except ValueError:
        return jsonify({"message": "Quantity must be an integer"}), 400

    product = RepairingProduct(name=name, type=type, company=company, model=model, quantity=quantity)
    db.session.add(product)
    db.session.commit()

    return jsonify({"message": f"Repairing product '{name}' added successfully"}), 201

@app.route('/repairing/view', methods=['GET'])
def view_repairing_products():
    auth_key = request.args.get('auth_key')
    if not verify_auth_key(auth_key):
        return jsonify({"message": "Unauthorized access"}), 403

    products = RepairingProduct.query.all()
    product_list = [
        {
            "id": product.id,
            "name": product.name,
            "type": product.type,
            "company": product.company,
            "model": product.model,
            "quantity": product.quantity
        }
        for product in products
    ]
    return jsonify({"repairing_products": product_list}), 200

# Add other APIs (Selling Product, Phone Management) here similarly...

# Run the application
if __name__ == '__main__':
    app.run(debug=True)
    